//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.0
//     from Assets/Sys_Classes/Scripts/PackageSetup/Input/ClassSystemInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ClassSystemInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ClassSystemInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ClassSystemInput"",
    ""maps"": [
        {
            ""name"": ""DEBUG"",
            ""id"": ""ad84613f-a563-4146-bf7d-158258cb8f85"",
            ""actions"": [
                {
                    ""name"": ""RightChangeClass"",
                    ""type"": ""Button"",
                    ""id"": ""51a8928c-badd-4d3f-bef7-5eee1d87fbfd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftChangeClass"",
                    ""type"": ""Button"",
                    ""id"": ""ec32bfe5-5c38-4d0d-905e-4b6b6e3e4296"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseAbility1"",
                    ""type"": ""Button"",
                    ""id"": ""b0c713b0-3502-4bf1-855b-1f057b766e9d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseAbility2"",
                    ""type"": ""Button"",
                    ""id"": ""31627f78-5264-4d22-8f9c-26ca6b03dfe5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseAbility3"",
                    ""type"": ""Button"",
                    ""id"": ""9327aa44-e772-424e-a8d0-0f78783f8592"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3297144d-78fb-4442-b5bd-24e7799a042d"",
                    ""path"": ""<Keyboard>/rightBracket"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightChangeClass"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8836964a-b3c4-43b7-b903-03081471b4ef"",
                    ""path"": ""<Keyboard>/leftBracket"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftChangeClass"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da81b527-1c5c-4824-8cc1-2f90ecfea0e2"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseAbility1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""053439c2-2c3a-4225-9ab0-f51efe597a7e"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseAbility2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d008bc1-5621-4532-88f5-4ab4e136138b"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseAbility3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DEBUG
        m_DEBUG = asset.FindActionMap("DEBUG", throwIfNotFound: true);
        m_DEBUG_RightChangeClass = m_DEBUG.FindAction("RightChangeClass", throwIfNotFound: true);
        m_DEBUG_LeftChangeClass = m_DEBUG.FindAction("LeftChangeClass", throwIfNotFound: true);
        m_DEBUG_UseAbility1 = m_DEBUG.FindAction("UseAbility1", throwIfNotFound: true);
        m_DEBUG_UseAbility2 = m_DEBUG.FindAction("UseAbility2", throwIfNotFound: true);
        m_DEBUG_UseAbility3 = m_DEBUG.FindAction("UseAbility3", throwIfNotFound: true);
    }

    ~@ClassSystemInput()
    {
        UnityEngine.Debug.Assert(!m_DEBUG.enabled, "This will cause a leak and performance issues, ClassSystemInput.DEBUG.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DEBUG
    private readonly InputActionMap m_DEBUG;
    private List<IDEBUGActions> m_DEBUGActionsCallbackInterfaces = new List<IDEBUGActions>();
    private readonly InputAction m_DEBUG_RightChangeClass;
    private readonly InputAction m_DEBUG_LeftChangeClass;
    private readonly InputAction m_DEBUG_UseAbility1;
    private readonly InputAction m_DEBUG_UseAbility2;
    private readonly InputAction m_DEBUG_UseAbility3;
    public struct DEBUGActions
    {
        private @ClassSystemInput m_Wrapper;
        public DEBUGActions(@ClassSystemInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @RightChangeClass => m_Wrapper.m_DEBUG_RightChangeClass;
        public InputAction @LeftChangeClass => m_Wrapper.m_DEBUG_LeftChangeClass;
        public InputAction @UseAbility1 => m_Wrapper.m_DEBUG_UseAbility1;
        public InputAction @UseAbility2 => m_Wrapper.m_DEBUG_UseAbility2;
        public InputAction @UseAbility3 => m_Wrapper.m_DEBUG_UseAbility3;
        public InputActionMap Get() { return m_Wrapper.m_DEBUG; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DEBUGActions set) { return set.Get(); }
        public void AddCallbacks(IDEBUGActions instance)
        {
            if (instance == null || m_Wrapper.m_DEBUGActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DEBUGActionsCallbackInterfaces.Add(instance);
            @RightChangeClass.started += instance.OnRightChangeClass;
            @RightChangeClass.performed += instance.OnRightChangeClass;
            @RightChangeClass.canceled += instance.OnRightChangeClass;
            @LeftChangeClass.started += instance.OnLeftChangeClass;
            @LeftChangeClass.performed += instance.OnLeftChangeClass;
            @LeftChangeClass.canceled += instance.OnLeftChangeClass;
            @UseAbility1.started += instance.OnUseAbility1;
            @UseAbility1.performed += instance.OnUseAbility1;
            @UseAbility1.canceled += instance.OnUseAbility1;
            @UseAbility2.started += instance.OnUseAbility2;
            @UseAbility2.performed += instance.OnUseAbility2;
            @UseAbility2.canceled += instance.OnUseAbility2;
            @UseAbility3.started += instance.OnUseAbility3;
            @UseAbility3.performed += instance.OnUseAbility3;
            @UseAbility3.canceled += instance.OnUseAbility3;
        }

        private void UnregisterCallbacks(IDEBUGActions instance)
        {
            @RightChangeClass.started -= instance.OnRightChangeClass;
            @RightChangeClass.performed -= instance.OnRightChangeClass;
            @RightChangeClass.canceled -= instance.OnRightChangeClass;
            @LeftChangeClass.started -= instance.OnLeftChangeClass;
            @LeftChangeClass.performed -= instance.OnLeftChangeClass;
            @LeftChangeClass.canceled -= instance.OnLeftChangeClass;
            @UseAbility1.started -= instance.OnUseAbility1;
            @UseAbility1.performed -= instance.OnUseAbility1;
            @UseAbility1.canceled -= instance.OnUseAbility1;
            @UseAbility2.started -= instance.OnUseAbility2;
            @UseAbility2.performed -= instance.OnUseAbility2;
            @UseAbility2.canceled -= instance.OnUseAbility2;
            @UseAbility3.started -= instance.OnUseAbility3;
            @UseAbility3.performed -= instance.OnUseAbility3;
            @UseAbility3.canceled -= instance.OnUseAbility3;
        }

        public void RemoveCallbacks(IDEBUGActions instance)
        {
            if (m_Wrapper.m_DEBUGActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDEBUGActions instance)
        {
            foreach (var item in m_Wrapper.m_DEBUGActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DEBUGActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DEBUGActions @DEBUG => new DEBUGActions(this);
    public interface IDEBUGActions
    {
        void OnRightChangeClass(InputAction.CallbackContext context);
        void OnLeftChangeClass(InputAction.CallbackContext context);
        void OnUseAbility1(InputAction.CallbackContext context);
        void OnUseAbility2(InputAction.CallbackContext context);
        void OnUseAbility3(InputAction.CallbackContext context);
    }
}
